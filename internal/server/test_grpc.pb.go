// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package server

import (
	context "context"
	model "github.com/fajrirahmat/interview-aji/model"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// CheckInOutServiceClient is the client API for CheckInOutService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CheckInOutServiceClient interface {
	GetLocation(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*model.ListLocation, error)
	CheckInOut(ctx context.Context, in *model.CheckInOutRequest, opts ...grpc.CallOption) (*model.CheckInOutResponse, error)
}

type checkInOutServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewCheckInOutServiceClient(cc grpc.ClientConnInterface) CheckInOutServiceClient {
	return &checkInOutServiceClient{cc}
}

func (c *checkInOutServiceClient) GetLocation(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*model.ListLocation, error) {
	out := new(model.ListLocation)
	err := c.cc.Invoke(ctx, "/v1.CheckInOutService/GetLocation", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *checkInOutServiceClient) CheckInOut(ctx context.Context, in *model.CheckInOutRequest, opts ...grpc.CallOption) (*model.CheckInOutResponse, error) {
	out := new(model.CheckInOutResponse)
	err := c.cc.Invoke(ctx, "/v1.CheckInOutService/CheckInOut", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CheckInOutServiceServer is the server API for CheckInOutService service.
// All implementations must embed UnimplementedCheckInOutServiceServer
// for forward compatibility
type CheckInOutServiceServer interface {
	GetLocation(context.Context, *emptypb.Empty) (*model.ListLocation, error)
	CheckInOut(context.Context, *model.CheckInOutRequest) (*model.CheckInOutResponse, error)
	mustEmbedUnimplementedCheckInOutServiceServer()
}

// UnimplementedCheckInOutServiceServer must be embedded to have forward compatible implementations.
type UnimplementedCheckInOutServiceServer struct {
}

func (UnimplementedCheckInOutServiceServer) GetLocation(context.Context, *emptypb.Empty) (*model.ListLocation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetLocation not implemented")
}
func (UnimplementedCheckInOutServiceServer) CheckInOut(context.Context, *model.CheckInOutRequest) (*model.CheckInOutResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckInOut not implemented")
}
func (UnimplementedCheckInOutServiceServer) mustEmbedUnimplementedCheckInOutServiceServer() {}

// UnsafeCheckInOutServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CheckInOutServiceServer will
// result in compilation errors.
type UnsafeCheckInOutServiceServer interface {
	mustEmbedUnimplementedCheckInOutServiceServer()
}

func RegisterCheckInOutServiceServer(s grpc.ServiceRegistrar, srv CheckInOutServiceServer) {
	s.RegisterService(&CheckInOutService_ServiceDesc, srv)
}

func _CheckInOutService_GetLocation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CheckInOutServiceServer).GetLocation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.CheckInOutService/GetLocation",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CheckInOutServiceServer).GetLocation(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _CheckInOutService_CheckInOut_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(model.CheckInOutRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CheckInOutServiceServer).CheckInOut(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.CheckInOutService/CheckInOut",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CheckInOutServiceServer).CheckInOut(ctx, req.(*model.CheckInOutRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// CheckInOutService_ServiceDesc is the grpc.ServiceDesc for CheckInOutService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CheckInOutService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "v1.CheckInOutService",
	HandlerType: (*CheckInOutServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetLocation",
			Handler:    _CheckInOutService_GetLocation_Handler,
		},
		{
			MethodName: "CheckInOut",
			Handler:    _CheckInOutService_CheckInOut_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "test.proto",
}
